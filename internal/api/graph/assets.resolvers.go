package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/jugo-io/go-poc/internal/api/model"
)

// CreateAsset is the resolver for the createAsset field.
func (r *mutationResolver) CreateAsset(ctx context.Context, input NewAsset) (Asset, error) {
	asset, err := r.AssetService.CreateAsset(ctx, model.NewAsset{
		Name:        input.Name,
		Description: input.Description,
	})
	if err != nil {
		panic(err)
	}

	return ConvertAsset(asset), nil
}

// UpdateAsset is the resolver for the updateAsset field.
func (r *mutationResolver) UpdateAsset(ctx context.Context, input UpdateAsset) (Asset, error) {
	asset, err := r.AssetService.UpdateAsset(ctx, "owner", model.UpdateAsset{
		ID:          input.ID,
		Name:        input.Name,
		Description: input.Description,
	})
	if err != nil {
		panic(err)
	}

	return ConvertAsset(asset), nil
}

// DeleteAsset is the resolver for the deleteAsset field.
func (r *mutationResolver) DeleteAsset(ctx context.Context, id string) (bool, error) {
	err := r.AssetService.DeleteAsset(ctx, "owner", id)
	if err != nil {
		panic(err)
	}

	return true, nil
}

// UploadAsset is the resolver for the uploadAsset field.
func (r *mutationResolver) UploadAsset(ctx context.Context, id string) (PresignedURL, error) {
	panic(fmt.Errorf("not implemented: UploadAsset - uploadAsset"))
}

// Assets is the resolver for the assets field.
func (r *queryResolver) Assets(ctx context.Context, pagination *Pagination) ([]Asset, error) {
	assets, err := r.AssetService.GetAssets(ctx, "owner", P(pagination))
	if err != nil {
		panic(err)
	}

	res := make([]Asset, 0, len(assets))
	for _, a := range assets {
		res = append(res, ConvertAsset(a))
	}

	return res, nil
}

// Asset is the resolver for the asset field.
func (r *queryResolver) Asset(ctx context.Context, id string) (*Asset, error) {
	asset, err := r.AssetService.GetAsset(ctx, "owner", id)
	if err != nil {
		panic(err)
	}

	return &Asset{
		ID:          asset.ID,
		Name:        asset.Name,
		Description: asset.Description,
		URI:         asset.URI,
		CreatedAt:   asset.CreatedAt,
		UpdatedAt:   asset.UpdatedAt,
	}, nil
}
