package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"

	"github.com/jugo-io/go-poc/api/auth"
	"github.com/jugo-io/go-poc/api/model"
)

// CreateAsset is the resolver for the createAsset field.
func (r *mutationResolver) CreateAsset(ctx context.Context, input NewAsset) (Asset, error) {
	user, err := auth.GetUser(ctx)
	if err != nil {
		return Asset{}, err
	}

	asset, err := r.AssetService.CreateAsset(ctx, auth.Auth{ID: user.ID}, model.NewAsset{
		Name:        input.Name,
		Description: input.Description,
		URI:         input.URI,
	})

	return Asset{
		ID:          asset.ID,
		Owner:       asset.Owner,
		Name:        asset.Name,
		Description: asset.Description,
		URI:         asset.URI,
		CreatedAt:   asset.CreatedAt,
		UpdatedAt:   asset.UpdatedAt,
	}, err
}

// Assets is the resolver for the assets field.
func (r *queryResolver) Assets(ctx context.Context) ([]Asset, error) {
	user, err := auth.GetUser(ctx)
	if err != nil {
		return nil, err
	}

	assets, err := r.AssetService.GetAssets(ctx, auth.Auth{ID: user.ID})
	if err != nil {
		return nil, err
	}

	var result []Asset
	for _, asset := range assets {
		result = append(result, Asset{
			ID:          asset.ID,
			Owner:       asset.Owner,
			Name:        asset.Name,
			Description: asset.Description,
			URI:         asset.URI,
			CreatedAt:   asset.CreatedAt,
			UpdatedAt:   asset.UpdatedAt,
		})
	}

	return result, nil
}
